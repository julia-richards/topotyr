{"version":3,"sources":["BurgerMenu.js","App.js","serviceWorker.js","index.js"],"names":["BurgerIcon","_","react_default","a","createElement","className","viewBox","x","y","width","height","BurgerMenu","_useState","useState","_useState2","Object","slicedToArray","menuOpen","setMenuOpen","lib_BurgerMenu","customBurgerIcon","BurgerMenu_BurgerIcon","burgerButtonClassName","outerContainerId","pageWrapId","isOpen","onStateChange","_ref","react_router_dom","to","onClick","Home","lazy","__webpack_require__","e","then","bind","About","Maps","App","id","src_BurgerMenu_0","react","fallback","style","position","top","left","right","color","react_router","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sRAKMA,SAAa,SAAAC,GAAC,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcC,QAAQ,aACnCJ,EAAAC,EAAAC,cAAA,QAAMG,EAAE,IAAIC,EAAE,IAAIC,MAAM,KAAKC,OAAO,MACpCR,EAAAC,EAAAC,cAAA,QAAMG,EAAE,IAAIC,EAAE,KAAKC,MAAM,KAAKC,OAAO,MACrCR,EAAAC,EAAAC,cAAA,QAAMG,EAAE,IAAIC,EAAE,KAAKC,MAAM,KAAKC,OAAO,SAgC1BC,EA5BI,SAAAV,GAAK,IAAAW,EACUC,oBAAS,GADnBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACfK,EADeH,EAAA,GACLI,EADKJ,EAAA,GAGtB,OACEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACe,EAAA,UAAD,CACEC,iBAAkBlB,EAAAC,EAAAC,cAACiB,EAAD,MAClBC,sBAAsB,MACtBC,iBAAiB,MACjBC,WAAW,YACXC,OAAQR,EACRS,cAAe,SAAAC,GAAA,IAAGF,EAAHE,EAAGF,OAAH,OAAgBP,EAAYO,IAC3CpB,UAAU,QAEVH,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAMC,GAAG,IAAIC,QAAS,kBAAMZ,GAAY,KAAxC,QAGAhB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAMC,GAAG,UAAUC,QAAS,kBAAMZ,GAAY,KAA9C,SAGAhB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAMC,GAAG,SAASC,QAAS,kBAAMZ,GAAY,KAA7C,WC5BFa,EAAOC,eAAK,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,YAClBC,EAAQL,eAAK,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,YACnBE,EAAON,eAAK,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,YAiCTG,MA/Bf,WACE,OACErC,EAAAC,EAAAC,cAAA,OAAKoC,GAAG,OACNtC,EAAAC,EAAAC,cAACqC,EAAD,MACAvC,EAAAC,EAAAC,cAAA,QAAMoC,GAAG,aACPtC,EAAAC,EAAAC,cAACsC,EAAA,SAAD,CACEC,SACEzC,EAAAC,EAAAC,cAAA,KACEwC,MAAO,CACLC,SAAU,WACVC,IAAK,EACLC,KAAM,EACNC,MAAO,EACPC,MAAO,SANX,QAaF/C,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,KACEhD,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWtB,IACjC7B,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CAAOC,KAAK,UAAUE,UAAWhB,IACjCnC,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CAAOC,KAAK,SAASE,UAAWf,SCpBxBgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP1D,EAAAC,EAAAC,cAACwB,EAAA,EAAD,KACE1B,EAAAC,EAAAC,cAACyD,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.0db2efd3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { scaleDown as Menu } from \"react-burger-menu\";\nimport { Link } from \"react-router-dom\";\nimport \"./BurgerMenu.css\";\n\nconst BurgerIcon = _ => (\n  <svg className=\"burger-icon\" viewBox=\"0 0 32 32\">\n    <rect x=\"2\" y=\"4\" width=\"28\" height=\"4\" />\n    <rect x=\"2\" y=\"14\" width=\"28\" height=\"4\" />\n    <rect x=\"2\" y=\"24\" width=\"22\" height=\"4\" />\n  </svg>\n);\n\nconst BurgerMenu = _ => {\n  const [menuOpen, setMenuOpen] = useState(false);\n\n  return (\n    <div className=\"Menu-wrap\">\n      <Menu\n        customBurgerIcon={<BurgerIcon />}\n        burgerButtonClassName=\"dan\"\n        outerContainerId=\"App\"\n        pageWrapId=\"page-wrap\"\n        isOpen={menuOpen}\n        onStateChange={({ isOpen }) => setMenuOpen(isOpen)}\n        className=\"Menu\"\n      >\n        <Link to=\"/\" onClick={() => setMenuOpen(false)}>\n          Home\n        </Link>\n        <Link to=\"/about/\" onClick={() => setMenuOpen(false)}>\n          About\n        </Link>\n        <Link to=\"/maps/\" onClick={() => setMenuOpen(false)}>\n          Maps\n        </Link>\n      </Menu>\n    </div>\n  );\n};\n\nexport default BurgerMenu;\n","import React, { Suspense, lazy } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport BurgerMenu from \"./BurgerMenu\";\n\nconst Home = lazy(() => import(\"./pages/Home\"));\nconst About = lazy(() => import(\"./pages/About\"));\nconst Maps = lazy(() => import(\"./pages/Maps\"));\n\nfunction App() {\n  return (\n    <div id=\"App\">\n      <BurgerMenu />\n      <main id=\"page-wrap\">\n        <Suspense\n          fallback={\n            <p\n              style={{\n                position: \"absolute\",\n                top: 6,\n                left: 0,\n                right: 0,\n                color: \"#fff\"\n              }}\n            >\n              ...\n            </p>\n          }\n        >\n          <Switch>\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/about/\" component={About} />\n            <Route path=\"/maps/\" component={Maps} />\n          </Switch>\n        </Suspense>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}